import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

class TicketBookingSystem {
    private final int totalSeats = 10;
    private final boolean[] seats = new boolean[totalSeats];
    private final Lock lock = new ReentrantLock();

    public void bookSeat(int seatNumber, boolean isVIP) {
        if (isVIP) {
            Thread.currentThread().setPriority(Thread.MAX_PRIORITY);
        } else {
            Thread.currentThread().setPriority(Thread.MIN_PRIORITY);
        }

        lock.lock();
        try {
            if (seatNumber < 0 || seatNumber >= totalSeats) {
                System.out.println("Invalid seat number: " + seatNumber);
                return;
            }
            if (!seats[seatNumber]) {
                seats[seatNumber] = true;
                System.out.println(Thread.currentThread().getName() + " booked seat " + seatNumber);
            } else {
                System.out.println("Seat " + seatNumber + " is already booked.");
            }
        } finally {
            lock.unlock();
        }
    }
}

class BookingThread extends Thread {
    private final TicketBookingSystem bookingSystem;
    private final int seatNumber;
    private final boolean isVIP;

    public BookingThread(TicketBookingSystem bookingSystem, int seatNumber, boolean isVIP) {
        this.bookingSystem = bookingSystem;
        this.seatNumber = seatNumber;
        this.isVIP = isVIP;
    }

    @Override
    public void run() {
        bookingSystem.bookSeat(seatNumber, isVIP);
    }
}

public class Main {
    public static void main(String[] args) {
        TicketBookingSystem bookingSystem = new TicketBookingSystem();

        BookingThread thread1 = new BookingThread(bookingSystem, 2, true); 
        BookingThread thread2 = new BookingThread(bookingSystem, 2, false); 
        BookingThread thread3 = new BookingThread(bookingSystem, 3, true);
        BookingThread thread4 = new BookingThread(bookingSystem, 4, false); 

       
        thread1.start();
        thread2.start();
        thread3.start();
        thread4.start();
    }
}
